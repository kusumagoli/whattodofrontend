{"ast":null,"code":"import _classCallCheck from \"/Users/meghana/Documents/dev/VVfrontend/leaflet-example/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/meghana/Documents/dev/VVfrontend/leaflet-example/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/meghana/Documents/dev/VVfrontend/leaflet-example/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/meghana/Documents/dev/VVfrontend/leaflet-example/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/meghana/Documents/dev/VVfrontend/leaflet-example/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/meghana/Documents/dev/VVfrontend/leaflet-example/src/components/maprender/mapreder.js\";\nimport React, { Component } from 'react';\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet';\nimport L from 'leaflet';\nimport { myicon } from \"./icon\";\nimport { myicon2 } from \"./icon2\";\nimport pin2 from \"./../app/images/pin2.png\";\nimport Button from '@material-ui/core/Button';\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\nvar position = [17.440081, 78.348915];\n\nvar MapRender =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapRender, _Component);\n\n  function MapRender() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MapRender);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapRender)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleClick = function (e) {\n      _this.props.setMarker({\n        latitude: e.latlng.lat,\n        longitude: e.latlng.lng\n      });\n    };\n\n    _this.handleViewMore = function (event) {\n      var id = event.currentTarget.value;\n      console.log(id);\n      var path = \"/view/\";\n\n      _this.props.history.push({\n        pathname: path,\n        state: {\n          id: id\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(MapRender, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      {\n        navigator.geolocation.getCurrentPosition(function (location) {\n          console.log(\"my current latitude :\", location.coords.latitude);\n          console.log(\"my current longitude :\", location.coords.longitude);\n          sessionStorage.setItem(\"lat\", location.coords.latitude);\n          sessionStorage.setItem(\"long\", location.coords.longitude);\n          console.log(\"my current latitude :\", sessionStorage.getItem(\"lat\"));\n          console.log(\"my current longitude :\", sessionStorage.getItem(\"long\"));\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Map, {\n        ref: this.mapRef,\n        center: position,\n        zoom: 13,\n        style: {\n          height: '600px',\n          width: '1800px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(Marker, {\n        style: {\n          position: \"fixed\"\n        },\n        icon: myicon,\n        position: [parseFloat(sessionStorage.getItem(\"lat\")), parseFloat(sessionStorage.getItem(\"long\"))],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Popup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Your Current location.\")), this.props.data.map(function (data) {\n        return React.createElement(Marker, {\n          position: [parseFloat(data.latitude), parseFloat(data.longitude)],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, React.createElement(Popup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, data.attr_Name), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }), data.location, React.createElement(Button, {\n          size: \"small\",\n          color: \"primary\",\n          style: {\n            float: \"right\"\n          },\n          onClick: _this2.handleViewMore,\n          value: data.aid,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, \"View...\")));\n      }));\n    }\n  }]);\n\n  return MapRender;\n}(Component);\n\nexport default MapRender;","map":{"version":3,"sources":["/Users/meghana/Documents/dev/VVfrontend/leaflet-example/src/components/maprender/mapreder.js"],"names":["React","Component","Map","Marker","Popup","TileLayer","L","myicon","myicon2","pin2","Button","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","position","MapRender","handleClick","e","props","setMarker","latitude","latlng","lat","longitude","lng","handleViewMore","event","id","currentTarget","value","console","log","path","history","push","pathname","state","navigator","geolocation","getCurrentPosition","location","coords","sessionStorage","setItem","getItem","mapRef","height","width","parseFloat","data","map","attr_Name","float","aid"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet';\nimport L from 'leaflet';\nimport {myicon} from \"./icon\";\nimport {myicon2} from \"./icon2\"\nimport pin2 from \"./../app/images/pin2.png\";\nimport Button from '@material-ui/core/Button';\n\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\nconst position = [17.440081, 78.348915];\nclass MapRender extends Component {\n\n  handleClick = (e) => {\n    this.props.setMarker({\n      latitude: e.latlng.lat,\n      longitude: e.latlng.lng \n    });\n  };\n\n  componentDidMount() {\n\n    {navigator.geolocation.getCurrentPosition(function(location) {\n      console.log(\"my current latitude :\",location.coords.latitude)\n      console.log(\"my current longitude :\",location.coords.longitude);\n     sessionStorage.setItem(\"lat\",location.coords.latitude)\n     sessionStorage.setItem(\"long\",location.coords.longitude)\n     console.log(\"my current latitude :\",sessionStorage.getItem(\"lat\"))\n      console.log(\"my current longitude :\",sessionStorage.getItem(\"long\"));\n\n    })}\n    \n  }\n  handleViewMore = (event)=> {\n\n\n    let id=event.currentTarget.value\n    console.log(id);\n    let path= `/view/`;\n    this.props.history.push({\n      pathname: path,\n      state: {\n        id : id\n      }\n   }) \n\n\n    \n    \n  }\n\n  \n  render() {\n    return (\n      <Map\n        ref={this.mapRef}\n        center={position} \n        zoom={13} \n        style={{ height: '600px', width: '1800px' }}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n         \n        />\n\n      <Marker  style={{position:\"fixed\"}} icon={myicon} position={[parseFloat(sessionStorage.getItem(\"lat\")), parseFloat(sessionStorage.getItem(\"long\"))]}>\n                                 <Popup>Your Current location.</Popup>\n                                 </Marker>\n        {\n\n\n          this.props.data.map((data) => (\n            <Marker position={[parseFloat(data.latitude), parseFloat(data.longitude)]}>\n            <Popup>\n            \n              \n            <b>{data.attr_Name}</b>\n            <br/>\n            {data.location}\n            <Button size=\"small\" color=\"primary\" style={{float :\"right\"}} onClick = {this.handleViewMore} value={data.aid}>\n                        View...\n            </Button>\n            </Popup>\n            </Marker>\n          ))\n        }\n      </Map>\n    );\n  }\n}\n\nexport default MapRender;"]},"metadata":{},"sourceType":"module"}